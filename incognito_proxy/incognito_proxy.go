// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incognito_proxy

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IncognitoProxyABI is the input ABI used to generate the binding from.
const IncognitoProxyABI = "[{\"name\":\"SwapBeaconCommittee\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"newCommitteeRoot\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SwapBridgeCommittee\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"newCommitteeRoot\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyString\",\"inputs\":[{\"type\":\"string\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyBytes32\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyBool\",\"inputs\":[{\"type\":\"bool\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyUint256\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyPubkey\",\"inputs\":[{\"type\":\"bytes\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"numBeaconVals\"},{\"type\":\"address[8]\",\"name\":\"_beaconComm\"},{\"type\":\"uint256\",\"name\":\"numBridgeVals\"},{\"type\":\"address[8]\",\"name\":\"_bridgeComm\"},{\"type\":\"address\",\"name\":\"_mulsig\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"extractMetaFromInst\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"},{\"type\":\"uint256\",\"name\":\"out\"},{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes\",\"name\":\"inst\"},{\"type\":\"int128\",\"name\":\"numPk\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2423},{\"name\":\"extractCommitteeFromInst\",\"outputs\":[{\"type\":\"address[8]\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes\",\"name\":\"inst\"},{\"type\":\"uint256\",\"name\":\"numVals\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":7183},{\"name\":\"findCommitteeFromHeight\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"blkHeight\"},{\"type\":\"bool\",\"name\":\"isBeacon\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":33174433566491089988853087204989085599961850606706021597304597818267111641842574},{\"name\":\"instructionInMerkleTree\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"leaf\"},{\"type\":\"bytes32\",\"name\":\"root\"},{\"type\":\"bytes32[8]\",\"name\":\"path\"},{\"type\":\"bool[8]\",\"name\":\"left\"},{\"type\":\"int128\",\"name\":\"length\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":5765},{\"name\":\"verifySig\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address[8]\",\"name\":\"signers\"},{\"type\":\"uint256[8]\",\"name\":\"v\"},{\"type\":\"bytes32[8]\",\"name\":\"r\"},{\"type\":\"bytes32[8]\",\"name\":\"s\"},{\"type\":\"bytes32\",\"name\":\"blk\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3660},{\"name\":\"instructionApproved\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"isBeacon\"},{\"type\":\"bytes32\",\"name\":\"instHash\"},{\"type\":\"uint256\",\"name\":\"blkHeight\"},{\"type\":\"bytes32[8]\",\"name\":\"instPath\"},{\"type\":\"bool[8]\",\"name\":\"instPathIsLeft\"},{\"type\":\"int128\",\"name\":\"instPathLen\"},{\"type\":\"bytes32\",\"name\":\"instRoot\"},{\"type\":\"bytes32\",\"name\":\"blkData\"},{\"type\":\"int128\",\"name\":\"numSig\"},{\"type\":\"uint256[8]\",\"name\":\"sigIdxs\"},{\"type\":\"uint256[8]\",\"name\":\"v\"},{\"type\":\"bytes32[8]\",\"name\":\"r\"},{\"type\":\"bytes32[8]\",\"name\":\"s\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":34911314905050832920206651980119404217760900376690630057896461578385808586465738},{\"name\":\"swapBridgeCommittee\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes\",\"name\":\"inst\"},{\"type\":\"int128\",\"name\":\"numPk\"},{\"type\":\"bytes32[8]\",\"name\":\"beaconInstPath\"},{\"type\":\"bool[8]\",\"name\":\"beaconInstPathIsLeft\"},{\"type\":\"int128\",\"name\":\"beaconInstPathLen\"},{\"type\":\"bytes32\",\"name\":\"beaconInstRoot\"},{\"type\":\"bytes32\",\"name\":\"beaconBlkData\"},{\"type\":\"int128\",\"name\":\"beaconNumSig\"},{\"type\":\"uint256[8]\",\"name\":\"beaconSigIdxs\"},{\"type\":\"uint256[8]\",\"name\":\"beaconSigVs\"},{\"type\":\"bytes32[8]\",\"name\":\"beaconSigRs\"},{\"type\":\"bytes32[8]\",\"name\":\"beaconSigSs\"},{\"type\":\"bytes32[8]\",\"name\":\"bridgeInstPath\"},{\"type\":\"bool[8]\",\"name\":\"bridgeInstPathIsLeft\"},{\"type\":\"int128\",\"name\":\"bridgeInstPathLen\"},{\"type\":\"bytes32\",\"name\":\"bridgeInstRoot\"},{\"type\":\"bytes32\",\"name\":\"bridgeBlkData\"},{\"type\":\"int128\",\"name\":\"bridgeNumSig\"},{\"type\":\"uint256[8]\",\"name\":\"bridgeSigIdxs\"},{\"type\":\"uint256[8]\",\"name\":\"bridgeSigVs\"},{\"type\":\"bytes32[8]\",\"name\":\"bridgeSigRs\"},{\"type\":\"bytes32[8]\",\"name\":\"bridgeSigSs\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":139645259620203331680826607920477616871043601506762520231585846313543234346259734},{\"name\":\"swapBeaconCommittee\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes\",\"name\":\"inst\"},{\"type\":\"int128\",\"name\":\"numPk\"},{\"type\":\"bytes32[8]\",\"name\":\"beaconInstPath\"},{\"type\":\"bool[8]\",\"name\":\"beaconInstPathIsLeft\"},{\"type\":\"int128\",\"name\":\"beaconInstPathLen\"},{\"type\":\"bytes32\",\"name\":\"beaconInstRoot\"},{\"type\":\"bytes32\",\"name\":\"beaconBlkData\"},{\"type\":\"int128\",\"name\":\"beaconNumSig\"},{\"type\":\"uint256[8]\",\"name\":\"beaconSigIdxs\"},{\"type\":\"uint256[8]\",\"name\":\"beaconSigVs\"},{\"type\":\"bytes32[8]\",\"name\":\"beaconSigRs\"},{\"type\":\"bytes32[8]\",\"name\":\"beaconSigSs\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":69822629810101665840413303960238808435521800753381260115792923156771617173335479},{\"name\":\"beaconComm__Pubkeys\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"},{\"type\":\"int128\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1139},{\"name\":\"beaconComm__PrevBlk\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":976},{\"name\":\"beaconComm__NumVals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1006},{\"name\":\"bridgeComm__Pubkeys\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"},{\"type\":\"int128\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1229},{\"name\":\"bridgeComm__PrevBlk\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1066},{\"name\":\"bridgeComm__NumVals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1096},{\"name\":\"latestBeaconBlk\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":933},{\"name\":\"latestBridgeBlk\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":963},{\"name\":\"mulsig\",\"outputs\":[{\"type\":\"address\",\"unit\":\"MulSigP256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":993}]"

// IncognitoProxyBin is the compiled bytecode used for deploying new contracts.
var IncognitoProxyBin = ""

// DeployIncognitoProxy deploys a new Ethereum contract, binding an instance of IncognitoProxy to it.
func DeployIncognitoProxy(auth *bind.TransactOpts, backend bind.ContractBackend, numBeaconVals *big.Int, _beaconComm [8]common.Address, numBridgeVals *big.Int, _bridgeComm [8]common.Address, _mulsig common.Address) (common.Address, *types.Transaction, *IncognitoProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(IncognitoProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncognitoProxyBin), backend, numBeaconVals, _beaconComm, numBridgeVals, _bridgeComm, _mulsig)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IncognitoProxy{IncognitoProxyCaller: IncognitoProxyCaller{contract: contract}, IncognitoProxyTransactor: IncognitoProxyTransactor{contract: contract}, IncognitoProxyFilterer: IncognitoProxyFilterer{contract: contract}}, nil
}

// IncognitoProxy is an auto generated Go binding around an Ethereum contract.
type IncognitoProxy struct {
	IncognitoProxyCaller     // Read-only binding to the contract
	IncognitoProxyTransactor // Write-only binding to the contract
	IncognitoProxyFilterer   // Log filterer for contract events
}

// IncognitoProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncognitoProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncognitoProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncognitoProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncognitoProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncognitoProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncognitoProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncognitoProxySession struct {
	Contract     *IncognitoProxy   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncognitoProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncognitoProxyCallerSession struct {
	Contract *IncognitoProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IncognitoProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncognitoProxyTransactorSession struct {
	Contract     *IncognitoProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IncognitoProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncognitoProxyRaw struct {
	Contract *IncognitoProxy // Generic contract binding to access the raw methods on
}

// IncognitoProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncognitoProxyCallerRaw struct {
	Contract *IncognitoProxyCaller // Generic read-only contract binding to access the raw methods on
}

// IncognitoProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncognitoProxyTransactorRaw struct {
	Contract *IncognitoProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncognitoProxy creates a new instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxy(address common.Address, backend bind.ContractBackend) (*IncognitoProxy, error) {
	contract, err := bindIncognitoProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxy{IncognitoProxyCaller: IncognitoProxyCaller{contract: contract}, IncognitoProxyTransactor: IncognitoProxyTransactor{contract: contract}, IncognitoProxyFilterer: IncognitoProxyFilterer{contract: contract}}, nil
}

// NewIncognitoProxyCaller creates a new read-only instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxyCaller(address common.Address, caller bind.ContractCaller) (*IncognitoProxyCaller, error) {
	contract, err := bindIncognitoProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyCaller{contract: contract}, nil
}

// NewIncognitoProxyTransactor creates a new write-only instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*IncognitoProxyTransactor, error) {
	contract, err := bindIncognitoProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyTransactor{contract: contract}, nil
}

// NewIncognitoProxyFilterer creates a new log filterer instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*IncognitoProxyFilterer, error) {
	contract, err := bindIncognitoProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyFilterer{contract: contract}, nil
}

// bindIncognitoProxy binds a generic wrapper to an already deployed contract.
func bindIncognitoProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncognitoProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IncognitoProxy *IncognitoProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IncognitoProxy.Contract.IncognitoProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IncognitoProxy *IncognitoProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.IncognitoProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IncognitoProxy *IncognitoProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.IncognitoProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IncognitoProxy *IncognitoProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IncognitoProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IncognitoProxy *IncognitoProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IncognitoProxy *IncognitoProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.contract.Transact(opts, method, params...)
}

// BeaconCommNumVals is a free data retrieval call binding the contract method 0xef823621.
//
// Solidity: function beaconComm__NumVals(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) BeaconCommNumVals(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "beaconComm__NumVals", arg0)
	return *ret0, err
}

// BeaconCommNumVals is a free data retrieval call binding the contract method 0xef823621.
//
// Solidity: function beaconComm__NumVals(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxySession) BeaconCommNumVals(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BeaconCommNumVals(&_IncognitoProxy.CallOpts, arg0)
}

// BeaconCommNumVals is a free data retrieval call binding the contract method 0xef823621.
//
// Solidity: function beaconComm__NumVals(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BeaconCommNumVals(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BeaconCommNumVals(&_IncognitoProxy.CallOpts, arg0)
}

// BeaconCommPrevBlk is a free data retrieval call binding the contract method 0x3183322d.
//
// Solidity: function beaconComm__PrevBlk(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) BeaconCommPrevBlk(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "beaconComm__PrevBlk", arg0)
	return *ret0, err
}

// BeaconCommPrevBlk is a free data retrieval call binding the contract method 0x3183322d.
//
// Solidity: function beaconComm__PrevBlk(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxySession) BeaconCommPrevBlk(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BeaconCommPrevBlk(&_IncognitoProxy.CallOpts, arg0)
}

// BeaconCommPrevBlk is a free data retrieval call binding the contract method 0x3183322d.
//
// Solidity: function beaconComm__PrevBlk(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BeaconCommPrevBlk(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BeaconCommPrevBlk(&_IncognitoProxy.CallOpts, arg0)
}

// BeaconCommPubkeys is a free data retrieval call binding the contract method 0xa298a00b.
//
// Solidity: function beaconComm__Pubkeys(uint256 arg0, int128 arg1) constant returns(address out)
func (_IncognitoProxy *IncognitoProxyCaller) BeaconCommPubkeys(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "beaconComm__Pubkeys", arg0, arg1)
	return *ret0, err
}

// BeaconCommPubkeys is a free data retrieval call binding the contract method 0xa298a00b.
//
// Solidity: function beaconComm__Pubkeys(uint256 arg0, int128 arg1) constant returns(address out)
func (_IncognitoProxy *IncognitoProxySession) BeaconCommPubkeys(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IncognitoProxy.Contract.BeaconCommPubkeys(&_IncognitoProxy.CallOpts, arg0, arg1)
}

// BeaconCommPubkeys is a free data retrieval call binding the contract method 0xa298a00b.
//
// Solidity: function beaconComm__Pubkeys(uint256 arg0, int128 arg1) constant returns(address out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BeaconCommPubkeys(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IncognitoProxy.Contract.BeaconCommPubkeys(&_IncognitoProxy.CallOpts, arg0, arg1)
}

// BridgeCommNumVals is a free data retrieval call binding the contract method 0xcf2611b1.
//
// Solidity: function bridgeComm__NumVals(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) BridgeCommNumVals(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "bridgeComm__NumVals", arg0)
	return *ret0, err
}

// BridgeCommNumVals is a free data retrieval call binding the contract method 0xcf2611b1.
//
// Solidity: function bridgeComm__NumVals(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxySession) BridgeCommNumVals(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BridgeCommNumVals(&_IncognitoProxy.CallOpts, arg0)
}

// BridgeCommNumVals is a free data retrieval call binding the contract method 0xcf2611b1.
//
// Solidity: function bridgeComm__NumVals(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BridgeCommNumVals(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BridgeCommNumVals(&_IncognitoProxy.CallOpts, arg0)
}

// BridgeCommPrevBlk is a free data retrieval call binding the contract method 0xd63e3ea5.
//
// Solidity: function bridgeComm__PrevBlk(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) BridgeCommPrevBlk(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "bridgeComm__PrevBlk", arg0)
	return *ret0, err
}

// BridgeCommPrevBlk is a free data retrieval call binding the contract method 0xd63e3ea5.
//
// Solidity: function bridgeComm__PrevBlk(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxySession) BridgeCommPrevBlk(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BridgeCommPrevBlk(&_IncognitoProxy.CallOpts, arg0)
}

// BridgeCommPrevBlk is a free data retrieval call binding the contract method 0xd63e3ea5.
//
// Solidity: function bridgeComm__PrevBlk(uint256 arg0) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BridgeCommPrevBlk(arg0 *big.Int) (*big.Int, error) {
	return _IncognitoProxy.Contract.BridgeCommPrevBlk(&_IncognitoProxy.CallOpts, arg0)
}

// BridgeCommPubkeys is a free data retrieval call binding the contract method 0x965f8965.
//
// Solidity: function bridgeComm__Pubkeys(uint256 arg0, int128 arg1) constant returns(address out)
func (_IncognitoProxy *IncognitoProxyCaller) BridgeCommPubkeys(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "bridgeComm__Pubkeys", arg0, arg1)
	return *ret0, err
}

// BridgeCommPubkeys is a free data retrieval call binding the contract method 0x965f8965.
//
// Solidity: function bridgeComm__Pubkeys(uint256 arg0, int128 arg1) constant returns(address out)
func (_IncognitoProxy *IncognitoProxySession) BridgeCommPubkeys(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IncognitoProxy.Contract.BridgeCommPubkeys(&_IncognitoProxy.CallOpts, arg0, arg1)
}

// BridgeCommPubkeys is a free data retrieval call binding the contract method 0x965f8965.
//
// Solidity: function bridgeComm__Pubkeys(uint256 arg0, int128 arg1) constant returns(address out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BridgeCommPubkeys(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IncognitoProxy.Contract.BridgeCommPubkeys(&_IncognitoProxy.CallOpts, arg0, arg1)
}

// ExtractCommitteeFromInst is a free data retrieval call binding the contract method 0x116fcab9.
//
// Solidity: function extractCommitteeFromInst(bytes inst, uint256 numVals) constant returns(address[8] out)
func (_IncognitoProxy *IncognitoProxyCaller) ExtractCommitteeFromInst(opts *bind.CallOpts, inst []byte, numVals *big.Int) ([8]common.Address, error) {
	var (
		ret0 = new([8]common.Address)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "extractCommitteeFromInst", inst, numVals)
	return *ret0, err
}

// ExtractCommitteeFromInst is a free data retrieval call binding the contract method 0x116fcab9.
//
// Solidity: function extractCommitteeFromInst(bytes inst, uint256 numVals) constant returns(address[8] out)
func (_IncognitoProxy *IncognitoProxySession) ExtractCommitteeFromInst(inst []byte, numVals *big.Int) ([8]common.Address, error) {
	return _IncognitoProxy.Contract.ExtractCommitteeFromInst(&_IncognitoProxy.CallOpts, inst, numVals)
}

// ExtractCommitteeFromInst is a free data retrieval call binding the contract method 0x116fcab9.
//
// Solidity: function extractCommitteeFromInst(bytes inst, uint256 numVals) constant returns(address[8] out)
func (_IncognitoProxy *IncognitoProxyCallerSession) ExtractCommitteeFromInst(inst []byte, numVals *big.Int) ([8]common.Address, error) {
	return _IncognitoProxy.Contract.ExtractCommitteeFromInst(&_IncognitoProxy.CallOpts, inst, numVals)
}

// ExtractMetaFromInst is a free data retrieval call binding the contract method 0x4dfbd8cd.
//
// Solidity: function extractMetaFromInst(bytes inst, int128 numPk) constant returns(uint256 out, uint256 out, uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) ExtractMetaFromInst(opts *bind.CallOpts, inst []byte, numPk *big.Int) (*big.Int, *big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _IncognitoProxy.contract.Call(opts, out, "extractMetaFromInst", inst, numPk)
	return *ret0, *ret1, *ret2, err
}

// ExtractMetaFromInst is a free data retrieval call binding the contract method 0x4dfbd8cd.
//
// Solidity: function extractMetaFromInst(bytes inst, int128 numPk) constant returns(uint256 out, uint256 out, uint256 out)
func (_IncognitoProxy *IncognitoProxySession) ExtractMetaFromInst(inst []byte, numPk *big.Int) (*big.Int, *big.Int, *big.Int, error) {
	return _IncognitoProxy.Contract.ExtractMetaFromInst(&_IncognitoProxy.CallOpts, inst, numPk)
}

// ExtractMetaFromInst is a free data retrieval call binding the contract method 0x4dfbd8cd.
//
// Solidity: function extractMetaFromInst(bytes inst, int128 numPk) constant returns(uint256 out, uint256 out, uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) ExtractMetaFromInst(inst []byte, numPk *big.Int) (*big.Int, *big.Int, *big.Int, error) {
	return _IncognitoProxy.Contract.ExtractMetaFromInst(&_IncognitoProxy.CallOpts, inst, numPk)
}

// FindCommitteeFromHeight is a free data retrieval call binding the contract method 0xff2293f6.
//
// Solidity: function findCommitteeFromHeight(uint256 blkHeight, bool isBeacon) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) FindCommitteeFromHeight(opts *bind.CallOpts, blkHeight *big.Int, isBeacon bool) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "findCommitteeFromHeight", blkHeight, isBeacon)
	return *ret0, err
}

// FindCommitteeFromHeight is a free data retrieval call binding the contract method 0xff2293f6.
//
// Solidity: function findCommitteeFromHeight(uint256 blkHeight, bool isBeacon) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxySession) FindCommitteeFromHeight(blkHeight *big.Int, isBeacon bool) (*big.Int, error) {
	return _IncognitoProxy.Contract.FindCommitteeFromHeight(&_IncognitoProxy.CallOpts, blkHeight, isBeacon)
}

// FindCommitteeFromHeight is a free data retrieval call binding the contract method 0xff2293f6.
//
// Solidity: function findCommitteeFromHeight(uint256 blkHeight, bool isBeacon) constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) FindCommitteeFromHeight(blkHeight *big.Int, isBeacon bool) (*big.Int, error) {
	return _IncognitoProxy.Contract.FindCommitteeFromHeight(&_IncognitoProxy.CallOpts, blkHeight, isBeacon)
}

// InstructionApproved is a free data retrieval call binding the contract method 0xd835a4d5.
//
// Solidity: function instructionApproved(bool isBeacon, bytes32 instHash, uint256 blkHeight, bytes32[8] instPath, bool[8] instPathIsLeft, int128 instPathLen, bytes32 instRoot, bytes32 blkData, int128 numSig, uint256[8] sigIdxs, uint256[8] v, bytes32[8] r, bytes32[8] s) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCaller) InstructionApproved(opts *bind.CallOpts, isBeacon bool, instHash [32]byte, blkHeight *big.Int, instPath [8][32]byte, instPathIsLeft [8]bool, instPathLen *big.Int, instRoot [32]byte, blkData [32]byte, numSig *big.Int, sigIdxs [8]*big.Int, v [8]*big.Int, r [8][32]byte, s [8][32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "instructionApproved", isBeacon, instHash, blkHeight, instPath, instPathIsLeft, instPathLen, instRoot, blkData, numSig, sigIdxs, v, r, s)
	return *ret0, err
}

// InstructionApproved is a free data retrieval call binding the contract method 0xd835a4d5.
//
// Solidity: function instructionApproved(bool isBeacon, bytes32 instHash, uint256 blkHeight, bytes32[8] instPath, bool[8] instPathIsLeft, int128 instPathLen, bytes32 instRoot, bytes32 blkData, int128 numSig, uint256[8] sigIdxs, uint256[8] v, bytes32[8] r, bytes32[8] s) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) InstructionApproved(isBeacon bool, instHash [32]byte, blkHeight *big.Int, instPath [8][32]byte, instPathIsLeft [8]bool, instPathLen *big.Int, instRoot [32]byte, blkData [32]byte, numSig *big.Int, sigIdxs [8]*big.Int, v [8]*big.Int, r [8][32]byte, s [8][32]byte) (bool, error) {
	return _IncognitoProxy.Contract.InstructionApproved(&_IncognitoProxy.CallOpts, isBeacon, instHash, blkHeight, instPath, instPathIsLeft, instPathLen, instRoot, blkData, numSig, sigIdxs, v, r, s)
}

// InstructionApproved is a free data retrieval call binding the contract method 0xd835a4d5.
//
// Solidity: function instructionApproved(bool isBeacon, bytes32 instHash, uint256 blkHeight, bytes32[8] instPath, bool[8] instPathIsLeft, int128 instPathLen, bytes32 instRoot, bytes32 blkData, int128 numSig, uint256[8] sigIdxs, uint256[8] v, bytes32[8] r, bytes32[8] s) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCallerSession) InstructionApproved(isBeacon bool, instHash [32]byte, blkHeight *big.Int, instPath [8][32]byte, instPathIsLeft [8]bool, instPathLen *big.Int, instRoot [32]byte, blkData [32]byte, numSig *big.Int, sigIdxs [8]*big.Int, v [8]*big.Int, r [8][32]byte, s [8][32]byte) (bool, error) {
	return _IncognitoProxy.Contract.InstructionApproved(&_IncognitoProxy.CallOpts, isBeacon, instHash, blkHeight, instPath, instPathIsLeft, instPathLen, instRoot, blkData, numSig, sigIdxs, v, r, s)
}

// InstructionInMerkleTree is a free data retrieval call binding the contract method 0x4a325b8a.
//
// Solidity: function instructionInMerkleTree(bytes32 leaf, bytes32 root, bytes32[8] path, bool[8] left, int128 length) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCaller) InstructionInMerkleTree(opts *bind.CallOpts, leaf [32]byte, root [32]byte, path [8][32]byte, left [8]bool, length *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "instructionInMerkleTree", leaf, root, path, left, length)
	return *ret0, err
}

// InstructionInMerkleTree is a free data retrieval call binding the contract method 0x4a325b8a.
//
// Solidity: function instructionInMerkleTree(bytes32 leaf, bytes32 root, bytes32[8] path, bool[8] left, int128 length) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) InstructionInMerkleTree(leaf [32]byte, root [32]byte, path [8][32]byte, left [8]bool, length *big.Int) (bool, error) {
	return _IncognitoProxy.Contract.InstructionInMerkleTree(&_IncognitoProxy.CallOpts, leaf, root, path, left, length)
}

// InstructionInMerkleTree is a free data retrieval call binding the contract method 0x4a325b8a.
//
// Solidity: function instructionInMerkleTree(bytes32 leaf, bytes32 root, bytes32[8] path, bool[8] left, int128 length) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCallerSession) InstructionInMerkleTree(leaf [32]byte, root [32]byte, path [8][32]byte, left [8]bool, length *big.Int) (bool, error) {
	return _IncognitoProxy.Contract.InstructionInMerkleTree(&_IncognitoProxy.CallOpts, leaf, root, path, left, length)
}

// LatestBeaconBlk is a free data retrieval call binding the contract method 0x82dc4fb6.
//
// Solidity: function latestBeaconBlk() constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) LatestBeaconBlk(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "latestBeaconBlk")
	return *ret0, err
}

// LatestBeaconBlk is a free data retrieval call binding the contract method 0x82dc4fb6.
//
// Solidity: function latestBeaconBlk() constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxySession) LatestBeaconBlk() (*big.Int, error) {
	return _IncognitoProxy.Contract.LatestBeaconBlk(&_IncognitoProxy.CallOpts)
}

// LatestBeaconBlk is a free data retrieval call binding the contract method 0x82dc4fb6.
//
// Solidity: function latestBeaconBlk() constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) LatestBeaconBlk() (*big.Int, error) {
	return _IncognitoProxy.Contract.LatestBeaconBlk(&_IncognitoProxy.CallOpts)
}

// LatestBridgeBlk is a free data retrieval call binding the contract method 0x1f140f24.
//
// Solidity: function latestBridgeBlk() constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCaller) LatestBridgeBlk(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "latestBridgeBlk")
	return *ret0, err
}

// LatestBridgeBlk is a free data retrieval call binding the contract method 0x1f140f24.
//
// Solidity: function latestBridgeBlk() constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxySession) LatestBridgeBlk() (*big.Int, error) {
	return _IncognitoProxy.Contract.LatestBridgeBlk(&_IncognitoProxy.CallOpts)
}

// LatestBridgeBlk is a free data retrieval call binding the contract method 0x1f140f24.
//
// Solidity: function latestBridgeBlk() constant returns(uint256 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) LatestBridgeBlk() (*big.Int, error) {
	return _IncognitoProxy.Contract.LatestBridgeBlk(&_IncognitoProxy.CallOpts)
}

// Mulsig is a free data retrieval call binding the contract method 0x1a435b55.
//
// Solidity: function mulsig() constant returns(address out)
func (_IncognitoProxy *IncognitoProxyCaller) Mulsig(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "mulsig")
	return *ret0, err
}

// Mulsig is a free data retrieval call binding the contract method 0x1a435b55.
//
// Solidity: function mulsig() constant returns(address out)
func (_IncognitoProxy *IncognitoProxySession) Mulsig() (common.Address, error) {
	return _IncognitoProxy.Contract.Mulsig(&_IncognitoProxy.CallOpts)
}

// Mulsig is a free data retrieval call binding the contract method 0x1a435b55.
//
// Solidity: function mulsig() constant returns(address out)
func (_IncognitoProxy *IncognitoProxyCallerSession) Mulsig() (common.Address, error) {
	return _IncognitoProxy.Contract.Mulsig(&_IncognitoProxy.CallOpts)
}

// VerifySig is a free data retrieval call binding the contract method 0xd55037d9.
//
// Solidity: function verifySig(address[8] signers, uint256[8] v, bytes32[8] r, bytes32[8] s, bytes32 blk) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCaller) VerifySig(opts *bind.CallOpts, signers [8]common.Address, v [8]*big.Int, r [8][32]byte, s [8][32]byte, blk [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "verifySig", signers, v, r, s, blk)
	return *ret0, err
}

// VerifySig is a free data retrieval call binding the contract method 0xd55037d9.
//
// Solidity: function verifySig(address[8] signers, uint256[8] v, bytes32[8] r, bytes32[8] s, bytes32 blk) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) VerifySig(signers [8]common.Address, v [8]*big.Int, r [8][32]byte, s [8][32]byte, blk [32]byte) (bool, error) {
	return _IncognitoProxy.Contract.VerifySig(&_IncognitoProxy.CallOpts, signers, v, r, s, blk)
}

// VerifySig is a free data retrieval call binding the contract method 0xd55037d9.
//
// Solidity: function verifySig(address[8] signers, uint256[8] v, bytes32[8] r, bytes32[8] s, bytes32 blk) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCallerSession) VerifySig(signers [8]common.Address, v [8]*big.Int, r [8][32]byte, s [8][32]byte, blk [32]byte) (bool, error) {
	return _IncognitoProxy.Contract.VerifySig(&_IncognitoProxy.CallOpts, signers, v, r, s, blk)
}

// SwapBeaconCommittee is a paid mutator transaction binding the contract method 0x253edb0d.
//
// Solidity: function swapBeaconCommittee(bytes inst, int128 numPk, bytes32[8] beaconInstPath, bool[8] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, int128 beaconNumSig, uint256[8] beaconSigIdxs, uint256[8] beaconSigVs, bytes32[8] beaconSigRs, bytes32[8] beaconSigSs) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactor) SwapBeaconCommittee(opts *bind.TransactOpts, inst []byte, numPk *big.Int, beaconInstPath [8][32]byte, beaconInstPathIsLeft [8]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconNumSig *big.Int, beaconSigIdxs [8]*big.Int, beaconSigVs [8]*big.Int, beaconSigRs [8][32]byte, beaconSigSs [8][32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.contract.Transact(opts, "swapBeaconCommittee", inst, numPk, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconNumSig, beaconSigIdxs, beaconSigVs, beaconSigRs, beaconSigSs)
}

// SwapBeaconCommittee is a paid mutator transaction binding the contract method 0x253edb0d.
//
// Solidity: function swapBeaconCommittee(bytes inst, int128 numPk, bytes32[8] beaconInstPath, bool[8] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, int128 beaconNumSig, uint256[8] beaconSigIdxs, uint256[8] beaconSigVs, bytes32[8] beaconSigRs, bytes32[8] beaconSigSs) returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) SwapBeaconCommittee(inst []byte, numPk *big.Int, beaconInstPath [8][32]byte, beaconInstPathIsLeft [8]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconNumSig *big.Int, beaconSigIdxs [8]*big.Int, beaconSigVs [8]*big.Int, beaconSigRs [8][32]byte, beaconSigSs [8][32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.SwapBeaconCommittee(&_IncognitoProxy.TransactOpts, inst, numPk, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconNumSig, beaconSigIdxs, beaconSigVs, beaconSigRs, beaconSigSs)
}

// SwapBeaconCommittee is a paid mutator transaction binding the contract method 0x253edb0d.
//
// Solidity: function swapBeaconCommittee(bytes inst, int128 numPk, bytes32[8] beaconInstPath, bool[8] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, int128 beaconNumSig, uint256[8] beaconSigIdxs, uint256[8] beaconSigVs, bytes32[8] beaconSigRs, bytes32[8] beaconSigSs) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactorSession) SwapBeaconCommittee(inst []byte, numPk *big.Int, beaconInstPath [8][32]byte, beaconInstPathIsLeft [8]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconNumSig *big.Int, beaconSigIdxs [8]*big.Int, beaconSigVs [8]*big.Int, beaconSigRs [8][32]byte, beaconSigSs [8][32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.SwapBeaconCommittee(&_IncognitoProxy.TransactOpts, inst, numPk, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconNumSig, beaconSigIdxs, beaconSigVs, beaconSigRs, beaconSigSs)
}

// SwapBridgeCommittee is a paid mutator transaction binding the contract method 0x53343780.
//
// Solidity: function swapBridgeCommittee(bytes inst, int128 numPk, bytes32[8] beaconInstPath, bool[8] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, int128 beaconNumSig, uint256[8] beaconSigIdxs, uint256[8] beaconSigVs, bytes32[8] beaconSigRs, bytes32[8] beaconSigSs, bytes32[8] bridgeInstPath, bool[8] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, int128 bridgeNumSig, uint256[8] bridgeSigIdxs, uint256[8] bridgeSigVs, bytes32[8] bridgeSigRs, bytes32[8] bridgeSigSs) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactor) SwapBridgeCommittee(opts *bind.TransactOpts, inst []byte, numPk *big.Int, beaconInstPath [8][32]byte, beaconInstPathIsLeft [8]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconNumSig *big.Int, beaconSigIdxs [8]*big.Int, beaconSigVs [8]*big.Int, beaconSigRs [8][32]byte, beaconSigSs [8][32]byte, bridgeInstPath [8][32]byte, bridgeInstPathIsLeft [8]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeNumSig *big.Int, bridgeSigIdxs [8]*big.Int, bridgeSigVs [8]*big.Int, bridgeSigRs [8][32]byte, bridgeSigSs [8][32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.contract.Transact(opts, "swapBridgeCommittee", inst, numPk, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconNumSig, beaconSigIdxs, beaconSigVs, beaconSigRs, beaconSigSs, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeNumSig, bridgeSigIdxs, bridgeSigVs, bridgeSigRs, bridgeSigSs)
}

// SwapBridgeCommittee is a paid mutator transaction binding the contract method 0x53343780.
//
// Solidity: function swapBridgeCommittee(bytes inst, int128 numPk, bytes32[8] beaconInstPath, bool[8] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, int128 beaconNumSig, uint256[8] beaconSigIdxs, uint256[8] beaconSigVs, bytes32[8] beaconSigRs, bytes32[8] beaconSigSs, bytes32[8] bridgeInstPath, bool[8] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, int128 bridgeNumSig, uint256[8] bridgeSigIdxs, uint256[8] bridgeSigVs, bytes32[8] bridgeSigRs, bytes32[8] bridgeSigSs) returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) SwapBridgeCommittee(inst []byte, numPk *big.Int, beaconInstPath [8][32]byte, beaconInstPathIsLeft [8]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconNumSig *big.Int, beaconSigIdxs [8]*big.Int, beaconSigVs [8]*big.Int, beaconSigRs [8][32]byte, beaconSigSs [8][32]byte, bridgeInstPath [8][32]byte, bridgeInstPathIsLeft [8]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeNumSig *big.Int, bridgeSigIdxs [8]*big.Int, bridgeSigVs [8]*big.Int, bridgeSigRs [8][32]byte, bridgeSigSs [8][32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.SwapBridgeCommittee(&_IncognitoProxy.TransactOpts, inst, numPk, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconNumSig, beaconSigIdxs, beaconSigVs, beaconSigRs, beaconSigSs, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeNumSig, bridgeSigIdxs, bridgeSigVs, bridgeSigRs, bridgeSigSs)
}

// SwapBridgeCommittee is a paid mutator transaction binding the contract method 0x53343780.
//
// Solidity: function swapBridgeCommittee(bytes inst, int128 numPk, bytes32[8] beaconInstPath, bool[8] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, int128 beaconNumSig, uint256[8] beaconSigIdxs, uint256[8] beaconSigVs, bytes32[8] beaconSigRs, bytes32[8] beaconSigSs, bytes32[8] bridgeInstPath, bool[8] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, int128 bridgeNumSig, uint256[8] bridgeSigIdxs, uint256[8] bridgeSigVs, bytes32[8] bridgeSigRs, bytes32[8] bridgeSigSs) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactorSession) SwapBridgeCommittee(inst []byte, numPk *big.Int, beaconInstPath [8][32]byte, beaconInstPathIsLeft [8]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconNumSig *big.Int, beaconSigIdxs [8]*big.Int, beaconSigVs [8]*big.Int, beaconSigRs [8][32]byte, beaconSigSs [8][32]byte, bridgeInstPath [8][32]byte, bridgeInstPathIsLeft [8]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeNumSig *big.Int, bridgeSigIdxs [8]*big.Int, bridgeSigVs [8]*big.Int, bridgeSigRs [8][32]byte, bridgeSigSs [8][32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.SwapBridgeCommittee(&_IncognitoProxy.TransactOpts, inst, numPk, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconNumSig, beaconSigIdxs, beaconSigVs, beaconSigRs, beaconSigSs, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeNumSig, bridgeSigIdxs, bridgeSigVs, bridgeSigRs, bridgeSigSs)
}

// IncognitoProxyNotifyBoolIterator is returned from FilterNotifyBool and is used to iterate over the raw logs and unpacked data for NotifyBool events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBoolIterator struct {
	Event *IncognitoProxyNotifyBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyBool represents a NotifyBool event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBool struct {
	Content bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyBool is a free log retrieval operation binding the contract event 0x6c8f06ff564112a969115be5f33d4a0f87ba918c9c9bc3090fe631968e818be4.
//
// Solidity: event NotifyBool(bool content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyBool(opts *bind.FilterOpts) (*IncognitoProxyNotifyBoolIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyBool")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyBoolIterator{contract: _IncognitoProxy.contract, event: "NotifyBool", logs: logs, sub: sub}, nil
}

// WatchNotifyBool is a free log subscription operation binding the contract event 0x6c8f06ff564112a969115be5f33d4a0f87ba918c9c9bc3090fe631968e818be4.
//
// Solidity: event NotifyBool(bool content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyBool(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyBool) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyBool)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNotifyBool is a log parse operation binding the contract event 0x6c8f06ff564112a969115be5f33d4a0f87ba918c9c9bc3090fe631968e818be4.
//
// Solidity: event NotifyBool(bool content)
func (_IncognitoProxy *IncognitoProxyFilterer) ParseNotifyBool(log types.Log) (*IncognitoProxyNotifyBool, error) {
	event := new(IncognitoProxyNotifyBool)
	if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncognitoProxyNotifyBytes32Iterator is returned from FilterNotifyBytes32 and is used to iterate over the raw logs and unpacked data for NotifyBytes32 events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBytes32Iterator struct {
	Event *IncognitoProxyNotifyBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyBytes32 represents a NotifyBytes32 event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBytes32 struct {
	Content [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyBytes32 is a free log retrieval operation binding the contract event 0xb42152598f9b870207037767fd41b627a327c9434c796b2ee501d68acec68d1b.
//
// Solidity: event NotifyBytes32(bytes32 content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyBytes32(opts *bind.FilterOpts) (*IncognitoProxyNotifyBytes32Iterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyBytes32")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyBytes32Iterator{contract: _IncognitoProxy.contract, event: "NotifyBytes32", logs: logs, sub: sub}, nil
}

// WatchNotifyBytes32 is a free log subscription operation binding the contract event 0xb42152598f9b870207037767fd41b627a327c9434c796b2ee501d68acec68d1b.
//
// Solidity: event NotifyBytes32(bytes32 content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyBytes32(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyBytes32) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyBytes32)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNotifyBytes32 is a log parse operation binding the contract event 0xb42152598f9b870207037767fd41b627a327c9434c796b2ee501d68acec68d1b.
//
// Solidity: event NotifyBytes32(bytes32 content)
func (_IncognitoProxy *IncognitoProxyFilterer) ParseNotifyBytes32(log types.Log) (*IncognitoProxyNotifyBytes32, error) {
	event := new(IncognitoProxyNotifyBytes32)
	if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncognitoProxyNotifyPubkeyIterator is returned from FilterNotifyPubkey and is used to iterate over the raw logs and unpacked data for NotifyPubkey events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyPubkeyIterator struct {
	Event *IncognitoProxyNotifyPubkey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyPubkeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyPubkey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyPubkey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyPubkeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyPubkeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyPubkey represents a NotifyPubkey event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyPubkey struct {
	Content []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyPubkey is a free log retrieval operation binding the contract event 0xa11744f929658ecc827473314800057766580618a39d80168078e0508381006b.
//
// Solidity: event NotifyPubkey(bytes content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyPubkey(opts *bind.FilterOpts) (*IncognitoProxyNotifyPubkeyIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyPubkey")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyPubkeyIterator{contract: _IncognitoProxy.contract, event: "NotifyPubkey", logs: logs, sub: sub}, nil
}

// WatchNotifyPubkey is a free log subscription operation binding the contract event 0xa11744f929658ecc827473314800057766580618a39d80168078e0508381006b.
//
// Solidity: event NotifyPubkey(bytes content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyPubkey(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyPubkey) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyPubkey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyPubkey)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyPubkey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNotifyPubkey is a log parse operation binding the contract event 0xa11744f929658ecc827473314800057766580618a39d80168078e0508381006b.
//
// Solidity: event NotifyPubkey(bytes content)
func (_IncognitoProxy *IncognitoProxyFilterer) ParseNotifyPubkey(log types.Log) (*IncognitoProxyNotifyPubkey, error) {
	event := new(IncognitoProxyNotifyPubkey)
	if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyPubkey", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncognitoProxyNotifyStringIterator is returned from FilterNotifyString and is used to iterate over the raw logs and unpacked data for NotifyString events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyStringIterator struct {
	Event *IncognitoProxyNotifyString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyString represents a NotifyString event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyString struct {
	Content string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyString is a free log retrieval operation binding the contract event 0x8b1126c8e4087477c3efd9e3785935b29c778491c70e249de774345f7ca9b7f9.
//
// Solidity: event NotifyString(string content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyString(opts *bind.FilterOpts) (*IncognitoProxyNotifyStringIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyString")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyStringIterator{contract: _IncognitoProxy.contract, event: "NotifyString", logs: logs, sub: sub}, nil
}

// WatchNotifyString is a free log subscription operation binding the contract event 0x8b1126c8e4087477c3efd9e3785935b29c778491c70e249de774345f7ca9b7f9.
//
// Solidity: event NotifyString(string content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyString(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyString) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyString)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNotifyString is a log parse operation binding the contract event 0x8b1126c8e4087477c3efd9e3785935b29c778491c70e249de774345f7ca9b7f9.
//
// Solidity: event NotifyString(string content)
func (_IncognitoProxy *IncognitoProxyFilterer) ParseNotifyString(log types.Log) (*IncognitoProxyNotifyString, error) {
	event := new(IncognitoProxyNotifyString)
	if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyString", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncognitoProxyNotifyUint256Iterator is returned from FilterNotifyUint256 and is used to iterate over the raw logs and unpacked data for NotifyUint256 events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyUint256Iterator struct {
	Event *IncognitoProxyNotifyUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyUint256 represents a NotifyUint256 event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyUint256 struct {
	Content *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyUint256 is a free log retrieval operation binding the contract event 0x8e2fc7b10a4f77a18c553db9a8f8c24d9e379da2557cb61ad4cc513a2f992cbd.
//
// Solidity: event NotifyUint256(uint256 content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyUint256(opts *bind.FilterOpts) (*IncognitoProxyNotifyUint256Iterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyUint256")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyUint256Iterator{contract: _IncognitoProxy.contract, event: "NotifyUint256", logs: logs, sub: sub}, nil
}

// WatchNotifyUint256 is a free log subscription operation binding the contract event 0x8e2fc7b10a4f77a18c553db9a8f8c24d9e379da2557cb61ad4cc513a2f992cbd.
//
// Solidity: event NotifyUint256(uint256 content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyUint256(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyUint256) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyUint256)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNotifyUint256 is a log parse operation binding the contract event 0x8e2fc7b10a4f77a18c553db9a8f8c24d9e379da2557cb61ad4cc513a2f992cbd.
//
// Solidity: event NotifyUint256(uint256 content)
func (_IncognitoProxy *IncognitoProxyFilterer) ParseNotifyUint256(log types.Log) (*IncognitoProxyNotifyUint256, error) {
	event := new(IncognitoProxyNotifyUint256)
	if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncognitoProxySwapBeaconCommitteeIterator is returned from FilterSwapBeaconCommittee and is used to iterate over the raw logs and unpacked data for SwapBeaconCommittee events raised by the IncognitoProxy contract.
type IncognitoProxySwapBeaconCommitteeIterator struct {
	Event *IncognitoProxySwapBeaconCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxySwapBeaconCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxySwapBeaconCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxySwapBeaconCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxySwapBeaconCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxySwapBeaconCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxySwapBeaconCommittee represents a SwapBeaconCommittee event raised by the IncognitoProxy contract.
type IncognitoProxySwapBeaconCommittee struct {
	NewCommitteeRoot [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSwapBeaconCommittee is a free log retrieval operation binding the contract event 0x9bc790c6fde431677d019a28e2223821b0c65a455b1ec636aa965504ea702779.
//
// Solidity: event SwapBeaconCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterSwapBeaconCommittee(opts *bind.FilterOpts) (*IncognitoProxySwapBeaconCommitteeIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "SwapBeaconCommittee")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxySwapBeaconCommitteeIterator{contract: _IncognitoProxy.contract, event: "SwapBeaconCommittee", logs: logs, sub: sub}, nil
}

// WatchSwapBeaconCommittee is a free log subscription operation binding the contract event 0x9bc790c6fde431677d019a28e2223821b0c65a455b1ec636aa965504ea702779.
//
// Solidity: event SwapBeaconCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchSwapBeaconCommittee(opts *bind.WatchOpts, sink chan<- *IncognitoProxySwapBeaconCommittee) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "SwapBeaconCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxySwapBeaconCommittee)
				if err := _IncognitoProxy.contract.UnpackLog(event, "SwapBeaconCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwapBeaconCommittee is a log parse operation binding the contract event 0x9bc790c6fde431677d019a28e2223821b0c65a455b1ec636aa965504ea702779.
//
// Solidity: event SwapBeaconCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) ParseSwapBeaconCommittee(log types.Log) (*IncognitoProxySwapBeaconCommittee, error) {
	event := new(IncognitoProxySwapBeaconCommittee)
	if err := _IncognitoProxy.contract.UnpackLog(event, "SwapBeaconCommittee", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncognitoProxySwapBridgeCommitteeIterator is returned from FilterSwapBridgeCommittee and is used to iterate over the raw logs and unpacked data for SwapBridgeCommittee events raised by the IncognitoProxy contract.
type IncognitoProxySwapBridgeCommitteeIterator struct {
	Event *IncognitoProxySwapBridgeCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxySwapBridgeCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxySwapBridgeCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxySwapBridgeCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxySwapBridgeCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxySwapBridgeCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxySwapBridgeCommittee represents a SwapBridgeCommittee event raised by the IncognitoProxy contract.
type IncognitoProxySwapBridgeCommittee struct {
	NewCommitteeRoot [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSwapBridgeCommittee is a free log retrieval operation binding the contract event 0x5e38c3577fbd30123a6e5ddc0d8bb0271335fe41d8f44ef655290058510394c1.
//
// Solidity: event SwapBridgeCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterSwapBridgeCommittee(opts *bind.FilterOpts) (*IncognitoProxySwapBridgeCommitteeIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "SwapBridgeCommittee")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxySwapBridgeCommitteeIterator{contract: _IncognitoProxy.contract, event: "SwapBridgeCommittee", logs: logs, sub: sub}, nil
}

// WatchSwapBridgeCommittee is a free log subscription operation binding the contract event 0x5e38c3577fbd30123a6e5ddc0d8bb0271335fe41d8f44ef655290058510394c1.
//
// Solidity: event SwapBridgeCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchSwapBridgeCommittee(opts *bind.WatchOpts, sink chan<- *IncognitoProxySwapBridgeCommittee) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "SwapBridgeCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxySwapBridgeCommittee)
				if err := _IncognitoProxy.contract.UnpackLog(event, "SwapBridgeCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwapBridgeCommittee is a log parse operation binding the contract event 0x5e38c3577fbd30123a6e5ddc0d8bb0271335fe41d8f44ef655290058510394c1.
//
// Solidity: event SwapBridgeCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) ParseSwapBridgeCommittee(log types.Log) (*IncognitoProxySwapBridgeCommittee, error) {
	event := new(IncognitoProxySwapBridgeCommittee)
	if err := _IncognitoProxy.contract.UnpackLog(event, "SwapBridgeCommittee", log); err != nil {
		return nil, err
	}
	return event, nil
}
